/* eslint-disable @typescript-eslint/ban-ts-comment */
//! Do not edit this file manually, it is generate by `prisma repo generator`

import {
  PrismaClient,
  Prisma,
  city,
  country,
  state,
  user_login,
  users,
  // areas,
  // dropdowns,
  // groups,
  // locality,
  // sub_teams,
  // teams,
} from '@prisma/client';
import _ from 'lodash';

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type AnyRecord = Record<string, any>;

export type BaseOption<Include, Select> = {
  include?: Include;
  select?: Select;
};

export type Find<Select, Include, Cursor, Order, Distinct> = BaseOption<
  Include,
  Select
> & {
  cursor?: Cursor;
  take?: number;
  skip?: number;
  orderBy?: Prisma.Enumerable<Order>;
  distinct?: Distinct;
};

export type CountArgs<Select, Cursor, Order, Distinct> = Omit<
  Find<Select, never, Cursor, Order, Distinct>,
  'include'
>;

export type Aggregate<Cursor, Order, Distinct> = Omit<
  CountArgs<never, Cursor, Order, Distinct>,
  'select' | 'distinct'
>;

export const prisma = new PrismaClient({
  log: ['error', 'info', 'query', 'warn'],
});

export const models = _.omit(prisma, [
  '$on',
  '$connect',
  '$disconnect',
  '$use',
  '$executeRaw',
  '$executeRawUnsafe',
  '$queryRaw',
  '$queryRawUnsafe',
  '$transaction',
]);

export const MODELS_NAME = {
  CITY: 'city',
  COUNTRY: 'country',
  STATE: 'state',
  USER_LOGIN: 'user_login',
  USERS: 'users',
  AREAS: 'areas',
  DROPDOWNS: 'dropdowns',
  GROUPS: 'groups',
  LOCALITY: 'locality',
  SUB_TEAMS: 'subTeams',
  TEAMS: 'teams',
} as const;

// eslint-disable-next-line @typescript-eslint/ban-types
export type ModelStructure = {
  city: city;
  country: country;
  state: state;
  user_login: user_login;
  users: users;
  // areas: areas;
  // dropdowns: dropdowns;
  // groups: groups;
  // locality: locality;
  // sub_teams: sub_teams;
  // teams: teams;
};

export type ModelName = keyof ModelStructure;

export type ModelScalarFields<T extends keyof ModelStructure> =
  Prisma.Enumerable<keyof ModelStructure[T]>;

export type ModelDelegate =
  // | Prisma.RejectOnNotFound
  // | Prisma.RejectPerOperation
  undefined;

export type ModelTypes<T = unknown> = {
  city: {
    Where: Prisma.cityWhereInput;
    Select: Prisma.citySelect;
    Include: unknown;
    Create: Prisma.cityCreateInput | Prisma.cityUncheckedCreateInput;
    Update: Prisma.cityUpdateInput | Prisma.cityUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.cityOrderByWithRelationInput;
    Delegate: Prisma.cityDelegate<ModelDelegate>;
    GroupBy: Prisma.CityGroupByOutputType;
    // @ts-ignore
    Return: Prisma.cityGetPayload<T>;
  };
  country: {
    Where: Prisma.countryWhereInput;
    Select: Prisma.countrySelect;
    Include: unknown;
    Create: Prisma.countryCreateInput | Prisma.countryUncheckedCreateInput;
    Update: Prisma.countryUpdateInput | Prisma.countryUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.countryOrderByWithRelationInput;
    Delegate: Prisma.countryDelegate<ModelDelegate>;
    GroupBy: Prisma.CountryGroupByOutputType;
    // @ts-ignore
    Return: Prisma.countryGetPayload<T>;
  };
  state: {
    Where: Prisma.stateWhereInput;
    Select: Prisma.stateSelect;
    Include: unknown;
    Create: Prisma.stateCreateInput | Prisma.stateUncheckedCreateInput;
    Update: Prisma.stateUpdateInput | Prisma.stateUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.stateOrderByWithRelationInput;
    Delegate: Prisma.stateDelegate<ModelDelegate>;
    GroupBy: Prisma.StateGroupByOutputType;
    // @ts-ignore
    Return: Prisma.stateGetPayload<T>;
  };
  user_login: {
    Where: Prisma.user_loginWhereInput;
    Select: Prisma.user_loginSelect;
    Include: unknown;
    Create:
      | Prisma.user_loginCreateInput
      | Prisma.user_loginUncheckedCreateInput;
    Update:
      | Prisma.user_loginUpdateInput
      | Prisma.user_loginUncheckedUpdateInput;
    Cursor: Prisma.user_loginWhereUniqueInput;
    Order: Prisma.user_loginOrderByWithRelationInput;
    Delegate: Prisma.user_loginDelegate<ModelDelegate>;
    GroupBy: Prisma.User_loginGroupByOutputType;
    // @ts-ignore
    Return: Prisma.user_loginGetPayload<T>;
  };
  users: {
    Where: Prisma.usersWhereInput;
    Select: Prisma.usersSelect;
    Include: unknown;
    Create: Prisma.usersCreateInput | Prisma.usersUncheckedCreateInput;
    Update: Prisma.usersUpdateInput | Prisma.usersUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.usersOrderByWithRelationInput;
    Delegate: Prisma.usersDelegate<ModelDelegate>;
    GroupBy: Prisma.UsersGroupByOutputType;
    // @ts-ignore
    Return: Prisma.usersGetPayload<T>;
  };
  // areas: {
  //   Where: Prisma.areasWhereInput;
  //   Select: Prisma.areasSelect;
  //   Include: unknown;
  //   Create: Prisma.areasCreateInput | Prisma.areasUncheckedCreateInput;
  //   Update: Prisma.areasUpdateInput | Prisma.areasUncheckedUpdateInput;
  //   Cursor: unknown;
  //   Order: Prisma.areasOrderByWithRelationInput;
  //   Delegate: Prisma.areasDelegate<ModelDelegate>;
  //   GroupBy: Prisma.AreasGroupByOutputType;
  //   // @ts-ignore
  //   Return: Prisma.areasGetPayload<T>;
  // };
  // dropdowns: {
  //   Where: Prisma.dropdownsWhereInput;
  //   Select: Prisma.dropdownsSelect;
  //   Include: unknown;
  //   Create: Prisma.dropdownsCreateInput | Prisma.dropdownsUncheckedCreateInput;
  //   Update: Prisma.dropdownsUpdateInput | Prisma.dropdownsUncheckedUpdateInput;
  //   Cursor: unknown;
  //   Order: Prisma.dropdownsOrderByWithRelationInput;
  //   Delegate: Prisma.dropdownsDelegate<ModelDelegate>;
  //   GroupBy: Prisma.DropdownsGroupByOutputType;
  //   // @ts-ignore
  //   Return: Prisma.dropdownsGetPayload<T>;
  // };
  // groups: {
  //   Where: Prisma.groupsWhereInput;
  //   Select: Prisma.groupsSelect;
  //   Include: unknown;
  //   Create: Prisma.groupsCreateInput | Prisma.groupsUncheckedCreateInput;
  //   Update: Prisma.groupsUpdateInput | Prisma.groupsUncheckedUpdateInput;
  //   Cursor: unknown;
  //   Order: Prisma.groupsOrderByWithRelationInput;
  //   Delegate: Prisma.groupsDelegate<ModelDelegate>;
  //   GroupBy: Prisma.GroupsGroupByOutputType;
  //   // @ts-ignore
  //   Return: Prisma.groupsGetPayload<T>;
  // };
  // locality: {
  //   Where: Prisma.localityWhereInput;
  //   Select: Prisma.localitySelect;
  //   Include: unknown;
  //   Create: Prisma.localityCreateInput | Prisma.localityUncheckedCreateInput;
  //   Update: Prisma.localityUpdateInput | Prisma.localityUncheckedUpdateInput;
  //   Cursor: unknown;
  //   Order: Prisma.localityOrderByWithRelationInput;
  //   Delegate: Prisma.localityDelegate<ModelDelegate>;
  //   GroupBy: Prisma.LocalityGroupByOutputType;
  //   // @ts-ignore
  //   Return: Prisma.localityGetPayload<T>;
  // };
  // sub_teams: {
  //   Where: Prisma.sub_teamsWhereInput;
  //   Select: Prisma.sub_teamsSelect;
  //   Include: unknown;
  //   Create: Prisma.sub_teamsCreateInput | Prisma.sub_teamsUncheckedCreateInput;
  //   Update: Prisma.sub_teamsUpdateInput | Prisma.sub_teamsUncheckedUpdateInput;
  //   Cursor: unknown;
  //   Order: Prisma.sub_teamsOrderByWithRelationInput;
  //   Delegate: Prisma.sub_teamsDelegate<ModelDelegate>;
  //   GroupBy: Prisma.Sub_teamsGroupByOutputType;
  //   // @ts-ignore
  //   Return: Prisma.sub_teamsGetPayload<T>;
  // };
  // teams: {
  //   Where: Prisma.teamsWhereInput;
  //   Select: Prisma.teamsSelect;
  //   Include: unknown;
  //   Create: Prisma.teamsCreateInput | Prisma.teamsUncheckedCreateInput;
  //   Update: Prisma.teamsUpdateInput | Prisma.teamsUncheckedUpdateInput;
  //   Cursor: unknown;
  //   Order: Prisma.teamsOrderByWithRelationInput;
  //   Delegate: Prisma.teamsDelegate<ModelDelegate>;
  //   GroupBy: Prisma.TeamsGroupByOutputType;
  //   // @ts-ignore
  //   Return: Prisma.teamsGetPayload<T>;
  // };
};
